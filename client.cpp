#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

// These are the constants indicating the states
#define STATE_OFFLINE 0
#define STATE_LOGIN_SENT 1
#define STATE_ONLINE 2
#define MAGIC_1 'H'
#define MAGIC_2 'Y'
#define OP_LOGIN 0x10
#define OP_SUB 0x20
#define OP_UNSUB 0x21
#define OP_POST 0x30
#define OP_FOR_ACK 0x31
#define OP_RETRIEVE 0x40
#define OP_LOGOUT 0x1F

// Now you can define other states in a similar fashion.

// All events starting with EVENT_USER_ are generated by a human user.
#define EVENT_USER_LOGIN_TYPED         0
#define EVENT_USER_POST_TYPED          1
// Now you can define other events from the user

// All events starting with EVENT_NET_ are generated by receiving a msg
// from the network. We deliberately use a larger numbers to help debug.
#define EVENT_NET_LOGIN_SUCCESSFUL      80
#define EVENT_NET_POST_ACK              81
// Now you can define other events from the network

int main() {

    int ret;
    int sockfd_tx = 0;
    int sockfd_rx = 0;
    char send_buffer[1024];
    char recv_buffer[1024];
    struct sockaddr_in serv_addr;
    struct sockaddr_in my_addr;
    int maxfd;
    fd_set read_set;
    FD_ZERO(&read_set);

    sockfd_tx = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd_tx < 0) {
	printf("socket() error: %s.\n", strerror(errno));
        return -1;
    }

    // The "serv_addr" is the server's address and port number, 
    // i.e, the destination address if the client needs to send something. 
    // Note that this "serv_addr" must match with the address in the 
    // "UDP receive" code.
    // We assume the server is also running on the same machine, and 
    // hence, the IP address of the server is just "127.0.0.1".
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    serv_addr.sin_port = htons(32000);

    sockfd_rx = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd_rx < 0) {
	printf("socket() error: %s.\n", strerror(errno));
        return -1;
    }

    // The "my_addr" is the client's address and port number used for  
    // receiving responses from the server.
    // Note that this is a local address, not a remote address.
    memset(&my_addr, 0, sizeof(my_addr));
    my_addr.sin_family = AF_INET;
    my_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    my_addr.sin_port = htons(some_semi_random_port_number);

    // Bind "my_addr" to the socket for receiving messages from the server.
    bind(sockfd_rx, 
         (struct sockaddr *) &my_addr, 
         sizeof(my_addr));

  QQ  maxfd = sockfd_rx + 1; // Note that the file descriptor of stdin is "0"
    

/    int state = STATE_OFFLINE;
    int event;
    int token; // Assume the token is a 32-bit integer

    while (1) {
    
        // Use select to wait on keyboard input or socket receiving.
        FD_SET(fileno(stdin), &read_set);
        FD_SET(sockfd_rx, &read_set);

        select(maxfd, &read_set, NULL, NULL, NULL);

        if (FD_ISSET(fileno(stdin), &read_set)) {

            // Now we know there is a keyboard input event
            // TODO: Figure out which event and process it according to the
            // current state

            fgets(send_buffer, sizeof(send_buffer), stdin);
            event = parse_the_event_from_the_input_string(...)

		if (event == EVENT_USER_LOGIN_TYPED) {
            	    if (state == STATE_OFFLINE) {

                    // TODO: take the corresponding action, i.e., read the
                    // ID and password string, assemble a login message,
                    // and send the message to the server.


                    // Once the corresponding action finishes, transit to
                    // the login_sent state
            	        state = LOGIN_SENT;

                } else {

                    // TODO: hand errors if the event happens in some state
                    // that is not expected.

                }

            } else if (event == .../* some other event */) {

                // TODO: process other event

            }

        }
        if (FD_ISSET(sockfd_rx, &read_set)) {

            // Now we know there is an event from the network
            // TODO: Figure out which event and process it according to the
            // current state

            ret = recv(sockfd_rx, recv_buffer, sizeof(recv_buffer), 0);

            event = parse_the_event_from_the_received_message(...)

            if (event == ...) {

                // TODO: check the current state and process the event

            }
        }

        // Now we finished processing the pending event. Just go back to the
        // beginning of the loop and waiting for another event. 
        // Note that you can set a timeout for the select() function 
        // to allow it to return regularly and check timeout related events.

    } // This is the end of the while loop

} // This is the end of main()